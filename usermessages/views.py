# encoding=utf-8

from django.views import generic
from django.utils.translation import gettext as _
from django.utils import timezone

from rest_framework import viewsets
from rest_framework.response import Response
from rest_framework import status
from rest_framework.permissions import IsAuthenticated

from jobs.models import JobPostulation
from employer.models import CVRequest, CVREQUEST_ACCEPTED

from serializer import UserMessageSerializer
from models import UserMessage
from forms import NewUserMessageForm


class UserMessageView(viewsets.ModelViewSet):
    """API endpoint for create/list UserMessage"""
    serializer_class = UserMessageSerializer
    permission_classes = [IsAuthenticated]
    queryset = UserMessage.objects.all()

    def read(self, request, message_pk):
        """Mark readed a message"""
        user_message = UserMessage(id=message_pk)
        user_message.readed_at = timezone.now()
        user_message.save()
        return Response({'status': _('Mensaje marcado como le√≠do')})

    def create_by_postulation(self, request, postulation_pk):
        """Create a message from postulation"""
        if not request.user.is_employer:
            content = {'unauthorized': '401 - only employer can send message'}
            return Response(
                content, status=status.HTTP_401_UNAUTHORIZED)

        serializer = UserMessageSerializer(data=request.data)
        if serializer.is_valid():
            postulation = JobPostulation(id=postulation_pk)
            user_message = UserMessage()
            user_message.employer = postulation.job.owner
            user_message.postulant = postulation.user
            user_message.message = request.data['message']
            user_message.save()
            user_message.postulant.send_usermessage_email(user_message)
            return Response({'status': _('Mensaje enviado')})
        else:
            return Response(serializer.errors,
                            status=status.HTTP_400_BAD_REQUEST)

    def create_by_cvrequest(self, request, cvrequest_pk):
        """Create a message from cvrequest"""
        if not request.user.is_employer:
            content = {'unauthorized': '401 - only employer can send message'}
            return Response(
                content, status=status.HTTP_401_UNAUTHORIZED)

        serializer = UserMessageSerializer(data=request.data)
        if serializer.is_valid():
            cvrequest = CVRequest.objects.filter(
                id=cvrequest_pk, status=CVREQUEST_ACCEPTED)
            if not cvrequest:
                return Response(status=status.HTTP_400_BAD_REQUEST)

            cvrequest = cvrequest[0]
            user_message = UserMessage()
            user_message.employer = cvrequest.employer.user
            user_message.postulant = cvrequest.user
            user_message.message = request.data['message']
            user_message.save()
            user_message.postulant.send_usermessage_email(user_message)
            return Response({'status': _('Mensaje enviado')})
        else:
            return Response(serializer.errors,
                            status=status.HTTP_400_BAD_REQUEST)

    def create(self, request, message_pk):
        """Create a response for a message"""
        if not self.user.is_postulant:
            content = {
                'unauthorized': '401 - only postulant can send response'}
            return Response(
                content, status=status.HTTP_401_UNAUTHORIZED)

        message = UserMessage(id=message_pk, postulant=request.user)

        if not message:
            content = {'badrequest': '400 - message not found'}
            return Response(content, status=status.HTTP_400_BAD_REQUEST)

        serializer = UserMessageSerializer(data=request.data)
        if serializer.is_valid():
            # XXX use request.data because when get from serializer.data raise
            # KeyError for some fields.

            # make the response message
            response = UserMessage()
            response.message = request.data['message']
            response.employer = message.employer
            response.postulant = message.postulant

            if message.postulation:
                response.postulation = message.postulation

            elif message.cvrequest:
                response.cvrequest = message.cvrequest

            response.save()

            # make relation between message and response
            message.response = response
            message.save()

            # Send email to employer if the preference is set, this setting
            # depend if the message generated by spontaneous cv or by
            # postulation
            if (response.postulation and
                    response.postulation.job.send_cvs_by_mail):
                response.employer.send_usermessage_email(response)

            elif response.employer.cv_spontany:
                response.employer.send_usermessage_email(response)

            return Response({'status': _('Mensaje enviado')})

        else:
            return Response(serializer.errors,
                            status=status.HTTP_400_BAD_REQUEST)

    def _queryset_filters(self, queryset, request):
        """Search in query params and filter queryset"""
        postulation_pk = request.query_params.get('postulation_pk', None)
        postulan_pk = request.query_params.get('postulan_pk', None)
        employer_pk = request.query_params.get('employer_pk', None)

        if postulation_pk:
            queryset = queryset.filter(postulation__pk=postulation_pk)
        if postulan_pk:
            queryset = queryset.filter(postulant__pk=postulan_pk)
        if employer_pk:
            queryset = queryset.filter(employer__pk=employer_pk)

        return queryset

    def list(self, request):
        """
        List messages filtered with request.user and if exists query_params
        """
        if request.user.is_employer:
            queryset = UserMessage.objects.filter(employer=request.user)
        elif request.user.is_postulant:
            queryset = UserMessage.objects.filter(postulant=request.user)
        else:
            content = {
                'unauthorized': '401 - user is not employed or postulant'}
            return Response(content, status=status.HTTP_401_UNAUTHORIZED)

        # get query params and filter
        queryset = self._queryset_filters(queryset, request)

        page = self.paginate_queryset(queryset)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            return self.get_paginated_response(serializer.data)

        serializer = UserMessageSerializer(queryset, many=True)
        return Response(serializer.data)

    def list_by_postulation(self, request, postulation_pk):
        """return all messages for the postulation"""
        if request.user.is_employer:
            queryset = UserMessage.objects.filter(employer=request.user)
        elif request.user.is_postulant:
            queryset = UserMessage.objects.filter(postulant=request.user)
        else:
            content = {
                'unauthorized': '401 - user is not employed or postulant'}
            return Response(content, status=status.HTTP_401_UNAUTHORIZED)

        # Filter by postulation
        queryset = queryset.filter(postulation__pk=postulation_pk)

        page = self.paginate_queryset(queryset)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            return self.get_paginated_response(serializer.data)

        serializer = UserMessageSerializer(queryset, many=True)
        return Response(serializer.data)

    def list_by_cvrequest(self, request, cvrequest_pk):
        """return all messages for the cvrequest"""
        if request.user.is_employer:
            queryset = UserMessage.objects.filter(employer=request.user)
        elif request.user.is_postulant:
            queryset = UserMessage.objects.filter(postulant=request.user)
        else:
            content = {
                'unauthorized': '401 - user is not employed or postulant'}
            return Response(content, status=status.HTTP_401_UNAUTHORIZED)

        # Filter by cvrequest
        queryset = queryset.filter(cvrequest__pk=cvrequest_pk)

        page = self.paginate_queryset(queryset)
        if page is not None:
            serializer = self.get_serializer(page, many=True)
            return self.get_paginated_response(serializer.data)

        serializer = UserMessageSerializer(queryset, many=True)
        return Response(serializer.data)

    def retrieve(self, request, message_pk=None):
        if not message_pk:
            content = {'BadRequest': '400 - Not pk passed'}
            return Response(content, status=status.HTTP_400_BAD_REQUEST)

        queryset = UserMessage.objects.filter(id=message_pk)
        serializer = UserMessageSerializer(queryset, many=True)
        return Response(serializer.data)


class NewUserMessageFormView(generic.FormView):

    template_name = 'new_message.html'
    form_class = NewUserMessageForm
